
install.packages("TTR")

library(dplyr); library(TTR)
rm(list=ls())
setwd("~/documents/MPhil/Asset Pricing II")
btc.dat<-read.csv("BTC data.csv",header=T)
SP.dat<-read.csv("SP500.csv",header=T)
GBPUSD.dat<-read.csv("GBPUSD.csv",header=T)

GBPUSD.price<-data.frame(cbind(GBPUSD.dat[,1],GBPUSD.dat[,2]))
btc.price<-data.frame(cbind(btc.dat[,1],btc.dat[,2]))
SP.price<-data.frame(cbind(SP.dat[,1],SP.dat[,2]))


#Matching data lengths to SP500
btc.price$SP<-SP.price$X2[match(btc.price$X1, SP.price$X1)]
btc.price.final<-na.omit(btc.price)

btc.price$GBPUSD<-GBPUSD.price$X2[match(btc.price$X1,GBPUSD.price$X1)]
btc.price.final<-na.omit(btc.price)

price.mat<-btc.price.final[order(nrow(btc.price.final):1),]

#MACD function
myMACD<-function(price,S,L,K){
  MACD<-EMA(price,S)-EMA(price,L)
  signal<-EMA(MACD,K)
  output<-cbind(MACD,signal)
  return(output)
}

macd.btc<-MACD(as.numeric(gsub(",", "",price.mat[,2])), nFast=12, nSlow=26,nSig=9, percent=FALSE)
dat.macd<-na.omit(data.frame(cbind(macd.btc, price.mat[,1],price.mat[,2])))
dat.macd$diff<-as.numeric(dat.macd$macd)-as.numeric(dat.macd$signal)
dat.macd$trade<-0; dat.macd$portval<-0; dat.macd$amount<-0

for (j in 2:dim(dat.macd)[1]) {
  if (sign(dat.macd$diff[j])==sign(dat.macd$diff[j-1])){
    dat.macd$trade[j]=0
  } else if (sign(dat.macd$diff[j])<sign(dat.macd$diff[j-1])) {
    dat.macd$trade[j]=-1
  } else {
    dat.macd$trade[j]=1
  }
}

#Trade execution
dat.macd$portval[1]=10000; dat.macd$amount[1]=10000/as.numeric(gsub(",", "",dat.macd$V4[1]))

for (j in 2:dim(dat.macd)[1]) {
  if (dat.macd$trade[j]==0) {
    dat.macd$portval[j]=dat.macd$portval[j-1]; dat.macd$amount[j]=dat.macd$amount[j-1]
  } else if (dat.macd$trade[j]==-1) {
    dat.macd$portval[j] = dat.macd$amount[j-1]*as.numeric(gsub(",","",dat.macd$V4[j])); dat.macd$amount[j]=0
  } else if (dat.macd$trade[j]==1) {
    dat.macd$portval[j]=dat.macd$portval[j-1]
    dat.macd$amount[j]=dat.macd$portval[j]/as.numeric(gsub(",","", dat.macd$V4[j]))
  }
}

#Summary stats
port.dat<-data.frame(cbind(dat.macd$V3, dat.macd$V4, dat.macd$portval,dat.macd$amount))
port.dat$actualval<-as.numeric(gsub(",","",port.dat$X4))*as.numeric(gsub(",","",port.dat$X2))

for (j in 2:dim(port.dat)[1]) {
 if (as.numeric(gsub(",","",port.dat$X4[j]))==0) {
   port.dat$actualval[j]=as.numeric(gsub(",","",port.dat$X3[j]))
 }
}

port.dat$lreturn<-0
for (j in 2:dim(port.dat)[1]) {
  port.dat$lreturn[j]<-log(port.dat$actualval[j]/port.dat$actualval[j-1])
}

port.dat$bah<-84.6023688663282*as.numeric(gsub(",","",port.dat$X2))
port.dat$bahlreturn<-0
for (j in 2:dim(port.dat)[1]) {
  port.dat$bahlreturn[j]<-log(port.dat$bah[j]/port.dat$bah[j-1])
}

month.dat<-port.dat[seq(1, nrow(port.dat), 21), ]
for (j in 2:dim(month.dat)[1]) {
  month.dat$lreturn[j]<-log(month.dat$actualval[j]/month.dat$actualval[j-1])
}

for (j in 2:dim(month.dat)[1]) {
  month.dat$bahlreturn[j]<-log(month.dat$bah[j]/month.dat$bah[j-1])
}

## Sp500
macd.SP<-MACD(as.numeric(gsub(",", "",price.mat[,3])), nFast=12, nSlow=26,nSig=9, percent=FALSE)
dat.macd.SP<-na.omit(data.frame(cbind(macd.SP, price.mat[,1],price.mat[,3])))
dat.macd.SP$diff<-as.numeric(dat.macd.SP$macd)-as.numeric(dat.macd.SP$signal)
dat.macd.SP$trade<-0; dat.macd.SP$portval<-0; dat.macd.SP$amount<-0

for (j in 2:dim(dat.macd.SP)[1]) {
  if (sign(dat.macd.SP$diff[j])==sign(dat.macd.SP$diff[j-1])){
    dat.macd.SP$trade[j]=0
  } else if (sign(dat.macd.SP$diff[j])<sign(dat.macd.SP$diff[j-1])) {
    dat.macd.SP$trade[j]=-1
  } else {
    dat.macd.SP$trade[j]=1
  }
}

#Trade execution
dat.macd.SP$portval[1]=10000; dat.macd.SP$amount[1]=10000/as.numeric(gsub(",", "",dat.macd.SP$V4[1]))

for (j in 2:dim(dat.macd.SP)[1]) {
  if (dat.macd.SP$trade[j]==0) {
    dat.macd.SP$portval[j]=dat.macd.SP$portval[j-1]; dat.macd.SP$amount[j]=dat.macd.SP$amount[j-1]
  } else if (dat.macd.SP$trade[j]==-1) {
    dat.macd.SP$portval[j] = dat.macd.SP$amount[j-1]*as.numeric(gsub(",","",dat.macd.SP$V4[j])); dat.macd.SP$amount[j]=0
  } else if (dat.macd.SP$trade[j]==1) {
    dat.macd.SP$portval[j]=dat.macd.SP$portval[j-1]
    dat.macd.SP$amount[j]=dat.macd.SP$portval[j]/as.numeric(gsub(",","", dat.macd.SP$V4[j]))
  }
}

#Summary stats
port.dat.SP<-data.frame(cbind(dat.macd.SP$V3, dat.macd.SP$V4, dat.macd.SP$portval,dat.macd.SP$amount))
port.dat.SP$actualval<-as.numeric(gsub(",","",port.dat.SP$X4))*as.numeric(gsub(",","",port.dat.SP$X2))

for (j in 2:dim(port.dat.SP)[1]) {
  if (as.numeric(gsub(",","",port.dat.SP$X4[j]))==0) {
    port.dat.SP$actualval[j]=as.numeric(gsub(",","",port.dat.SP$X3[j]))
  }
}

port.dat.SP$lreturn<-0
for (j in 2:dim(port.dat.SP)[1]) {
  port.dat.SP$lreturn[j]<-log(port.dat.SP$actualval[j]/port.dat.SP$actualval[j-1])
}

port.dat.SP$bah<-6.05888019776185*as.numeric(gsub(",","",port.dat.SP$X2))
port.dat.SP$bahlreturn<-0
for (j in 2:dim(port.dat.SP)[1]) {
  port.dat.SP$bahlreturn[j]<-log(port.dat.SP$bah[j]/port.dat.SP$bah[j-1])
}

month.dat.SP<-port.dat.SP[seq(1, nrow(port.dat.SP), 21), ]
for (j in 2:dim(month.dat.SP)[1]) {
  month.dat.SP$lreturn[j]<-log(month.dat.SP$actualval[j]/month.dat.SP$actualval[j-1])
}

for (j in 2:dim(month.dat.SP)[1]) {
  month.dat.SP$bahlreturn[j]<-log(month.dat.SP$bah[j]/month.dat.SP$bah[j-1])
}

#GBPUSD
macd.GBPUSD<-MACD(as.numeric(gsub(",", "",price.mat[,4])), nFast=12, nSlow=26,nSig=9, percent=FALSE)
dat.macd.GBPUSD<-na.omit(data.frame(cbind(macd.GBPUSD, price.mat[,1],price.mat[,4])))
dat.macd.GBPUSD$diff<-as.numeric(dat.macd.GBPUSD$macd)-as.numeric(dat.macd.GBPUSD$signal)
dat.macd.GBPUSD$trade<-0; dat.macd.GBPUSD$portval<-0; dat.macd.GBPUSD$amount<-0

for (j in 2:dim(dat.macd.GBPUSD)[1]) {
  if (sign(dat.macd.GBPUSD$diff[j])==sign(dat.macd.GBPUSD$diff[j-1])){
    dat.macd.GBPUSD$trade[j]=0
  } else if (sign(dat.macd.GBPUSD$diff[j])<sign(dat.macd.GBPUSD$diff[j-1])) {
    dat.macd.GBPUSD$trade[j]=-1
  } else {
    dat.macd.GBPUSD$trade[j]=1
  }
}

#Trade execution
dat.macd.GBPUSD$portval[1]=10000; dat.macd.GBPUSD$amount[1]=10000/as.numeric(gsub(",", "",dat.macd.GBPUSD$V4[1]))

for (j in 2:dim(dat.macd.GBPUSD)[1]) {
  if (dat.macd.GBPUSD$trade[j]==0) {
    dat.macd.GBPUSD$portval[j]=dat.macd.GBPUSD$portval[j-1]; dat.macd.GBPUSD$amount[j]=dat.macd.GBPUSD$amount[j-1]
  } else if (dat.macd.GBPUSD$trade[j]==-1) {
    dat.macd.GBPUSD$portval[j] = dat.macd.GBPUSD$amount[j-1]*as.numeric(gsub(",","",dat.macd.GBPUSD$V4[j])); dat.macd.GBPUSD$amount[j]=0
  } else if (dat.macd.GBPUSD$trade[j]==1) {
    dat.macd.GBPUSD$portval[j]=dat.macd.GBPUSD$portval[j-1]
    dat.macd.GBPUSD$amount[j]=dat.macd.GBPUSD$portval[j]/as.numeric(gsub(",","", dat.macd.GBPUSD$V4[j]))
  }
}

#Summary stats
port.dat.GBPUSD<-data.frame(cbind(dat.macd.GBPUSD$V3, dat.macd.GBPUSD$V4, dat.macd.GBPUSD$portval,dat.macd.GBPUSD$amount))
port.dat.GBPUSD$actualval<-as.numeric(gsub(",","",port.dat.GBPUSD$X4))*as.numeric(gsub(",","",port.dat.GBPUSD$X2))

for (j in 2:dim(port.dat.GBPUSD)[1]) {
  if (as.numeric(gsub(",","",port.dat.GBPUSD$X4[j]))==0) {
    port.dat.GBPUSD$actualval[j]=as.numeric(gsub(",","",port.dat.GBPUSD$X3[j]))
  }
}

port.dat.GBPUSD$lreturn<-0
for (j in 2:dim(port.dat.GBPUSD)[1]) {
  port.dat.GBPUSD$lreturn[j]<-log(port.dat.GBPUSD$actualval[j]/port.dat.GBPUSD$actualval[j-1])
}

port.dat.GBPUSD$bah<-6548.3596359112*as.numeric(gsub(",","",port.dat.GBPUSD$X2))
port.dat.GBPUSD$bahlreturn<-0
for (j in 2:dim(port.dat.GBPUSD)[1]) {
  port.dat.GBPUSD$bahlreturn[j]<-log(port.dat.GBPUSD$bah[j]/port.dat.GBPUSD$bah[j-1])
}

month.dat.GBPUSD<-port.dat.GBPUSD[seq(1, nrow(port.dat.GBPUSD), 21), ]
for (j in 2:dim(month.dat.GBPUSD)[1]) {
  month.dat.GBPUSD$lreturn[j]<-log(month.dat.GBPUSD$actualval[j]/month.dat.GBPUSD$actualval[j-1])
}

for (j in 2:dim(month.dat.GBPUSD)[1]) {
  month.dat.GBPUSD$bahlreturn[j]<-log(month.dat.GBPUSD$bah[j]/month.dat.GBPUSD$bah[j-1])
}

##Correlation tests
install.packages("ggpubr")
install.packages("devtools")
library(ggpubr); library(devtools)

##Plotting lreturn over time

library(ggplot2)
month.dat$Year<-0;month.dat$Year[1]=2013+5/12
for (j in 2:dim(month.dat)[1]) {
  month.dat$Year[j]=2013+5/12+(j-1)*1/12
}

ggplot(month.dat, aes(x=Year, y=lreturn))+geom_point() + geom_smooth(method="auto", se=TRUE, fullrange=FALSE, level=0.95) + scale_x_continuous(breaks=seq(2013, 2021,1))+ylab("Log Return") 
